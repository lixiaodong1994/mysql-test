-- 1. 查询"01"课程比"02"课程成绩高的学生的信息及课程分数
-- 第一种解法
-- select 
-- 	a.s_id, a.s_score as s1, b.s_score as s2,
-- 	c.s_name
-- from 
-- 	Score a, Score b, Student c
-- where 
-- 	a.s_id = b.s_id
-- 	and a.s_id = c.s_id
-- 	and a.c_id = '01'
-- 	and b.c_id = '02'
-- 	and a.s_score > b.s_score

-- 第二种解法
-- select 
-- 	b.*
-- from 
-- 	Student b 
-- left join 
-- (select 
-- 	a.s_id,
-- 	IFNULL(MAX(case when a.c_id = '01' then a.s_score else NULL end),0) s1,
-- 	IFNULL(MAX(case when a.c_id = '02' then a.s_score else NULL end),0) s2
-- from 
-- 	Score a
-- GROUP BY
-- 	a.s_id) t
-- on b.s_id = t.s_id
-- where 
-- 	t.s1 > t.s2
	
-- 2. 查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩
-- select 
-- 	b.*,
-- 	AVG(a.s_score) avg1
-- from 
-- 	Score a , Student b 
-- where 
-- 	a.s_id = b.s_id
-- GROUP BY
-- 	a.s_id
-- HAVING
-- 	AVG(a.s_score) >= 60

-- 3. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩
-- select 
-- 	a.s_id,
-- 	a.s_name,
-- 	COUNT(b.c_id) c1,
-- 	IFNULL(SUM(b.s_score),0) s1
-- from 
-- 	Student a 
-- left join 
-- 	Score b 
-- on a.s_id = b.s_id
-- GROUP BY
-- 	a.s_id,
-- 	a.s_name

-- 4. 查询学过"张三"老师授课的同学的信息 

-- 使用exists效率更高
-- select 
-- 	d.*
-- from 
-- 	Student d 
-- where 
-- EXISTS
-- (
-- 	select 1 
-- 	from 
-- (select 
-- 	c.s_id
-- from 
-- 	Teacher a 
-- left join 
-- 	Course b 
-- on a.t_id =  b.t_id
-- left join 
-- 	Score c 
-- on b.c_id = c.c_id
-- where a.t_name = '张三'
-- group by 
-- 	c.s_id) t where d.s_id = t.s_id)
-- -------------------------------------
-- select 
-- 	d.*
-- from 
-- 	Student d 
-- where 
-- d.s_id in 
-- (select 
-- 	c.s_id
-- from 
-- 	Teacher a 
-- left join 
-- 	Course b 
-- on a.t_id =  b.t_id
-- left join 
-- 	Score c 
-- on b.c_id = c.c_id
-- where a.t_name = '张三'
-- group by 
-- 	c.s_id)

-- 5. 查询没学过"张三"老师授课的同学的信息 

-- select 
-- 	d.*
-- from 
-- 	Student d 
-- where 
-- not EXISTS
-- (
-- 	select 1 
-- 	from 
-- (select 
-- 	c.s_id
-- from 
-- 	Teacher a 
-- left join 
-- 	Course b 
-- on a.t_id =  b.t_id
-- left join 
-- 	Score c 
-- on b.c_id = c.c_id
-- where a.t_name = '张三'
-- group by 
-- 	c.s_id) t where d.s_id = t.s_id)

-- 查询每门课程被选修的学生数
-- select 
-- 	b.c_id,
-- 	b.c_name,
-- 	count(1) cont
-- from 
-- 	Score a 
-- left join 
-- 	Course b 
-- on a.c_id = b.c_id
-- group by b.c_id, b.c_name

-- 查询出只有两门课程的全部学生的学号和姓名
-- select 
-- 	b.s_id, b.s_name,
-- 	count(a.c_id) c_count
-- from 
-- 	Score a
-- left join 
-- 	Student b 
-- on a.s_id = b.s_id
-- group by b.s_id, b.s_name
-- having count(a.c_id) = 2

-- 查询男生、女生人数
-- select 
-- 	sum(case when a.s_sex = '男' then 1 else 0 end ) man_count,
-- 	sum(case when a.s_sex = '女' then 1 else 0 end ) women_count
-- from 
-- 	Student a

-- 查询每门课程的平均成绩，结果按平均成绩降序排列， 平均成绩相同时，按课程编号升序排列
-- select 
-- 	a.c_id,
-- 	AVG(a.s_score) avg_score
-- from 
-- 	Score a 
-- group by a.c_id
-- order by AVG(a.s_score) desc, a.c_id asc

-- 查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩
-- select 
-- 	b.s_id, b.s_name,
-- 	AVG(a.s_score) avg_score
-- from 
-- 	Score a 
-- left join 
-- 	Student b 
-- on a.s_id = b.s_id
-- group by b.s_id, b.s_name
-- having AVG(a.s_score) >= 85

-- 查询课程名称为‘数学’，且分数低于60的学生姓名和分数
-- select 
-- 	c.s_id,c.s_name,a.s_score
-- from 
-- 	Score a 
-- left join 
-- 	Course b 
-- on a.c_id = b.c_id
-- left join 
-- 	Student c 
-- on a.s_id = c.s_id
-- where 
-- 	b.c_name = '数学'
-- 	and a.s_score < 60

-- 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩
-- select 
-- 	 distinct a.*
-- from 
-- 	Score a , Score b 
-- where 
-- 	a.c_id != b.c_id
-- and a.s_score = b.s_score

-- 查询每门课成绩最好的前两名
-- 第一种，rank函数
-- select 
--  t.*
-- from 
-- (
-- select 
-- 	a.c_id,
-- 	a.s_score,
-- 	rank() over(PARTITION by a.c_id order by a.s_score desc) rk
-- from 
-- 	Score a 
-- ) t
-- where t.rk <= 2

-- 子查询 
-- select 
-- 	a.c_id, a.s_score
-- from 
-- 	Score a 
-- where 
-- 	(select count(a.s_score) from Score b where a.c_id = b.c_id and a.s_score < b.s_score ) + 1 <= 2
-- ORDER BY 
-- 	a.c_id asc

-- 查询每个学生的年龄
-- select 
-- 	a.*,
-- 	(YEAR(NOW()) - a.s_brith) age
-- from 
-- 	Student a 

-- 查询本周过生日的学生
-- select 
-- a.*
-- from Student a 
-- where 
-- 	WEEKOFYEAR(STR_TO_DATE(CONCAT(YEAR(NOW()), DATE_FORMAT(a.s_brith, '%m%d')),'%y%m%d')) = WEEKOFYEAR(NOW())
